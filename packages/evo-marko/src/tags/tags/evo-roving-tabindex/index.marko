static interface Ret {
    isFocused: (index: number | string) => boolean;
    onKeydown: (e: KeyboardEvent) => void;
    onClick: (index: number | string) => void;
    setFocusIndex: (index: number | string) => void;
}
export interface Input<
    Index extends number | string | (number | string)[] | undefined,
> {
    selected?: Index;
    selectedChange?: (selected: Index) => void;
    autoSelect?: boolean;
    nodeList: () => (HTMLElement | undefined)[];
}

<let/index:=input.selected>
<let/focusIndex=(((Array.isArray(index) ? index[0] : index) || 0) as number | string)>

<const/setIndex=(newIndex: number | string) => {
    if (Array.isArray(index)) {
        // This is a "checkbox" type
        if (index.includes(newIndex)) {
            index = index.filter((n) => n !== newIndex) as typeof index;
        } else {
            index = [...index, newIndex] as typeof index;
        }
    } else {
        index = newIndex as typeof index;
    }
}>

<const/getValue=(currentItem?: HTMLElement) => {
    const value =
        currentItem?.getAttribute("data-value") ||
        currentItem?.getAttribute("value");
    return value;
}>
<return=(
    {
        setFocusIndex(index) {
            const items = input.nodeList();
            let currentItem;
            if (typeof index === "number") {
                currentItem = items[index];
            } else {
                currentItem = items.find((c) => getValue(c) === index);
            }
            if (
                currentItem &&
                currentItem.getAttribute("aria-disabled") !== "true"
            ) {
                focusIndex = index;
                currentItem.focus();
            }
        },
        isFocused(value) {
            return focusIndex === value;
        },
        onClick(value) {
            setIndex(value);
            focusIndex = value;
        },
        onKeydown(e) {
            if (e.key === "Enter" || e.key === " ") {
                setIndex(focusIndex);
            }
            if (
                ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].indexOf(
                    e.key,
                ) !== -1
            ) {
                const items = input.nodeList();
                const size = items.length;
                const direction =
                    e.key === "ArrowLeft" || e.key === "ArrowUp" ? -1 : 1;

                let currentIndex: number;
                if (typeof focusIndex === "number") {
                    currentIndex = focusIndex;
                } else {
                    currentIndex = items.findIndex(
                        (c) => getValue(c) === focusIndex,
                    );
                }

                let currentItem;
                while (true) {
                    currentIndex =
                        ((currentIndex as number) + size + direction) % size;
                    currentItem = items[currentIndex];
                    if (
                        currentItem &&
                        currentItem.getAttribute("aria-disabled") !== "true"
                    ) {
                        break;
                    } else if (currentIndex === focusIndex) {
                        break;
                    }
                }
                const value =
                    currentItem?.getAttribute("data-value") ||
                    currentItem?.getAttribute("value");

                focusIndex = value || currentIndex;
                if (input.autoSelect) {
                    setIndex(value || currentIndex);
                }
                currentItem?.focus();
            }
        },
    } as Ret
)>
