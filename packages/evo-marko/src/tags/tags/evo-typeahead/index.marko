static interface Ret {
    typeahead: (e: KeyboardEvent) => number | string;
}
export interface Input {
    timeoutLength?: number;
    nodeList: () => (HTMLElement | undefined)[];
}

<let/typeStr="">
<const/nodeList=input.nodeList>

<script>
    if (typeStr) {
        const timeout = setTimeout(() => {
            typeStr = "";
        }, input.timeoutLength || 2000);
        $signal.onabort = () => {
            clearTimeout(timeout);
        };
    }
</script>

<return=(
    {
        typeahead: function ({ key }) {
            if (!/^(?:\w| )$/.test(key)) {
                return -1;
            }
            typeStr += key;
            if (nodeList() == null) return -1;
            const lowerTypeStr = typeStr.toLocaleLowerCase();
            let index = nodeList().findIndex((el: HTMLElement | undefined) =>
                el?.textContent.toLocaleLowerCase().startsWith(lowerTypeStr),
            );
            if (index === -1) {
                index = nodeList().findIndex((el: HTMLElement | undefined) =>
                    el?.textContent.toLocaleLowerCase().includes(lowerTypeStr),
                );
            }
            const currentItem = nodeList()[index];
            const value =
                currentItem?.getAttribute("data-value") ||
                currentItem?.getAttribute("value");
            return value || index;
        },
    } as Ret
)>
